import{_ as d,c as r,b as s,a as o,e as a,d as e,w as t,r as i,o as c}from"./app-CCtLKDl1.js";const u={};function m(h,n){const l=i("RouteLink"),p=i("CommentService");return c(),r("div",null,[n[28]||(n[28]=s("h1",{id:"案例一-使用model-zoo训练复现sota论文",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#案例一-使用model-zoo训练复现sota论文"},[s("span",null,"案例一：使用Model Zoo训练复现SoTA论文")])],-1)),n[29]||(n[29]=s("p",null,"我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。",-1)),n[30]||(n[30]=s("p",null,[e("总的来说IMDL-BenCo通过类似"),s("code",null,"git"),e("、"),s("code",null,"conda"),e("这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDLBenCo的设计范式会非常轻松。")],-1)),s("p",null,[n[1]||(n[1]=e("无论如何，请先参考")),a(l,{to:"/zh/guide/quickstart/install.html"},{default:t(()=>n[0]||(n[0]=[e("安装")])),_:1}),n[2]||(n[2]=e("完成IMDL-BenCo的安装。"))]),n[31]||(n[31]=o(`<div class="hint-container tip"><p class="hint-container-title">本章动机</p><p>大部分人初次使用IMDL-Benco应该都是想训练并复现SoTA论文，如果你有一定深度学习经验（PyTorch框架，Linux的Shell脚本，多卡并行的参数等等前置知识），这会非常简单。本章会告诉你复现所需的所有流程。</p></div><h2 id="通过benco-init初始化" tabindex="-1"><a class="header-anchor" href="#通过benco-init初始化"><span>通过benco init初始化</span></a></h2><p>安装好benco后，创建一个干净的空文件夹作为工作路径，然后运行如下指令</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">benco init model_zoo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这时IMDL-BenCo会在该路径下生成复现model_zoo所需的所有Python脚本、shell脚本、默认数据集和必要的配置文件。大致的文件夹结构如下：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token builtin class-name">.</span></span>
<span class="line">├── balanced_dataset.json</span>
<span class="line">├── configs</span>
<span class="line">│   ├── CAT_full.yaml</span>
<span class="line">│   └── trufor.yaml</span>
<span class="line">├── runs</span>
<span class="line">│   ├── demo_catnet_protocol_iml_vit.sh</span>
<span class="line">│   ├── demo_catnet_protocol_mvss.sh</span>
<span class="line">│   ├── demo_test_cat_net.sh</span>
<span class="line">│   ├── demo_test_iml_vit.sh</span>
<span class="line">│   ├── demo_test_mantra_net.sh</span>
<span class="line">│   ├── demo_test_mvss.sh</span>
<span class="line">│   ├── demo_test_object_former.sh</span>
<span class="line">│   ├── demo_test_pscc.sh</span>
<span class="line">│   ├── demo_test_robustness_cat_net.sh</span>
<span class="line">│   ├── demo_test_robustness_iml_vit.sh</span>
<span class="line">│   ├── demo_test_robustness_mantra_net.sh</span>
<span class="line">│   ├── demo_test_robustness_mvss.sh</span>
<span class="line">│   ├── demo_test_robustness_object_former.sh</span>
<span class="line">│   ├── demo_test_robustness_pscc.sh</span>
<span class="line">│   ├── demo_test_robustness_span.sh</span>
<span class="line">│   ├── demo_test_robustness_trufor.sh</span>
<span class="line">│   ├── demo_test_span.sh</span>
<span class="line">│   ├── demo_test_trufor.sh</span>
<span class="line">│   ├── demo_train_backbone_segformer.sh</span>
<span class="line">│   ├── demo_train_backbone.sh</span>
<span class="line">│   ├── demo_train_cat_net.sh</span>
<span class="line">│   ├── demo_train_iml_vit.sh</span>
<span class="line">│   ├── demo_train_mantra_net.sh</span>
<span class="line">│   ├── demo_train_mvss.sh</span>
<span class="line">│   ├── demo_train_object_former.sh</span>
<span class="line">│   ├── demo_train_pscc.sh</span>
<span class="line">│   ├── demo_train_span.sh</span>
<span class="line">│   └── demo_train_trufor.sh</span>
<span class="line">├── test_datasets.json</span>
<span class="line">├── test.py</span>
<span class="line">├── test_robust.py</span>
<span class="line">└── train.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，根目录下包含了实际承担逻辑的训练及测试脚本<code>train.py</code>,<code>test.py</code>, <code>test_robust.py</code>。</p><div class="hint-container tip"><p class="hint-container-title">开发者小贴士，必看！</p><p>我们的设计理念<strong>鼓励按照您的需求对于这些脚本进行修改</strong>！比如修改<code>evaluator</code>以添加更多的测试指标；修改的<code>transform以</code>改变训练的预处理，或者重写测试逻辑等等。</p><p>IMDL-BenCo只是提升开发效率的框架，为了尽可能提高面对科研工作时的灵活性，我们选择通过<code>代码生成</code>而非耦合源码内的各种组件的方式，将最大的自由交还给使用者。请尽情发挥您的机智修改吧！</p></div><p>其中<code>./runs</code>文件夹下包含了所有用于启动对应训练的<code>shell</code>脚本，这些shell会调用根目录下的Python脚本，根据命名可以确认该脚本的功能、模型名。</p><blockquote><p>比如: <code>demo_train_trufor.sh</code>是用于训练TruFor的脚本。<code>demo_test_mvss.sh</code>就是测试MVSS-Net的脚本，<code>demo_test_robustness_cat_net.sh</code>是对CAT-Net进行鲁棒性测试的脚本。</p></blockquote><p>其中<code>./configs</code>路径下存放了一些模型的配置文件，需要调整对应超参数可以通过修改这里调整，默认路径即可由shell脚本自动读取。</p><h2 id="修改传入数据集" tabindex="-1"><a class="header-anchor" href="#修改传入数据集"><span>修改传入数据集</span></a></h2><p>打开你想要使用的目标Shell脚本，务必修改如下字段配置为你的数据集和checkpoint路径：</p>`,13)),s("ul",null,[s("li",null,[n[12]||(n[12]=e("训练脚本： ")),s("table",null,[n[11]||(n[11]=s("thead",null,[s("tr",null,[s("th",null,"字段名"),s("th",null,"字段功能"),s("th",null,"解释")])],-1)),s("tbody",null,[s("tr",null,[n[5]||(n[5]=s("td",null,"data_path",-1)),n[6]||(n[6]=s("td",null,"训练数据集路径",-1)),s("td",null,[n[4]||(n[4]=e("参考")),a(l,{to:"/zh/guide/quickstart/0_dataprepare.html"},{default:t(()=>n[3]||(n[3]=[e("数据集准备")])),_:1})])]),s("tr",null,[n[9]||(n[9]=s("td",null,"test_data_path",-1)),n[10]||(n[10]=s("td",null,"测试数据集路径",-1)),s("td",null,[n[8]||(n[8]=e("参考")),a(l,{to:"/zh/guide/quickstart/0_dataprepare.html"},{default:t(()=>n[7]||(n[7]=[e("数据集准备")])),_:1})])])])])]),s("li",null,[n[20]||(n[20]=e("测试脚本： ")),s("table",null,[n[19]||(n[19]=s("thead",null,[s("tr",null,[s("th",null,"字段名"),s("th",null,"字段功能"),s("th",null,"解释")])],-1)),s("tbody",null,[s("tr",null,[n[16]||(n[16]=s("td",null,"test_data_json",-1)),n[17]||(n[17]=s("td",null,"测试数据集JSON的路径，是一个包含了多个数据集名称和路径的JSON",-1)),s("td",null,[n[14]||(n[14]=e("参考")),a(l,{to:"/zh/guide/quickstart/0_dataprepare.html"},{default:t(()=>n[13]||(n[13]=[e("数据集准备")])),_:1}),n[15]||(n[15]=e("的末尾章节"))])]),n[18]||(n[18]=s("tr",null,[s("td",null,"checkpoint_path"),s("td",null,"存有准备测试的checkpoint的文件夹路径"),s("td",null,[e("是一个文件夹，里面至少有一个checkpoint，名称后，拓展名前必须有数字代表epoch数。比如"),s("code",null,"checkpoint-68.pth")])],-1))])])]),s("li",null,[n[27]||(n[27]=e("鲁棒性测试脚本： ")),s("table",null,[n[26]||(n[26]=s("thead",null,[s("tr",null,[s("th",null,"字段名"),s("th",null,"字段功能"),s("th",null,"解释")])],-1)),s("tbody",null,[s("tr",null,[n[23]||(n[23]=s("td",null,"test_data_path",-1)),n[24]||(n[24]=s("td",null,"训练数据集路径",-1)),s("td",null,[n[22]||(n[22]=e("参考")),a(l,{to:"/zh/guide/quickstart/0_dataprepare.html"},{default:t(()=>n[21]||(n[21]=[e("数据集准备")])),_:1})])]),n[25]||(n[25]=s("tr",null,[s("td",null,"checkpoint_path"),s("td",null,"存有准备测试的checkpoint的文件夹路径"),s("td",null,[e("是一个文件夹，里面至少有一个checkpoint，名称后，拓展名前必须有数字代表epoch数。比如"),s("code",null,"checkpoint-68.pth")])],-1))])])])]),n[32]||(n[32]=o(`<p>必要的PyTorch多卡训练参数调整，请通过学习或咨询ChatGPT解决，大致有如下字段：</p><ul><li><code>CUDA_VISIBLE_DEVICES=0</code>，指定仅使用该编号显卡</li><li><code>--nproc_per_node=4</code>，总运行显卡数量</li></ul><h2 id="通过shell传入nn-module的超参数-语法糖" tabindex="-1"><a class="header-anchor" href="#通过shell传入nn-module的超参数-语法糖"><span>通过shell传入nn.module的超参数（语法糖）</span></a></h2><p>此外，各个模型也会有自己的特殊的超参数，在BenCo中，shell脚本内部的“多余”（比如train.py内部不需要的命令行参数）命令行是可以直接传递到<code>nn.module</code>的<code>__init__</code>函数中的。 该功能实现于<a href="https://github.com/scu-zjz/IMDLBenCo/blob/f4d158312b8f39df07aa41f468529c417bc9a765/IMDLBenCo/training_scripts/train.py#L133" target="_blank" rel="noopener noreferrer">这里</a></p><p>所以暂时可以通过查看模型的<code>__init__()</code>函数来理解功能。</p><p>以TruFor为例，我们可以看到模型的<code>nn.Module</code>的具体实现中，需要对<code>__init__</code>函数传入大量的形参以正确初始化模型，<a href="https://github.com/scu-zjz/IMDLBenCo/blob/f4d158312b8f39df07aa41f468529c417bc9a765/IMDLBenCo/model_zoo/trufor/trufor.py#L15-L18" target="_blank" rel="noopener noreferrer">该位置代码链接</a>。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token decorator annotation punctuation">@MODELS<span class="token punctuation">.</span>register_module</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Trufor</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span></span>
<span class="line">                 phase<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">                 np_pretrain_weights<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span></span>
<span class="line">                 mit_b2_pretrain_weights<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span></span>
<span class="line">                 config_path<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">,</span></span>
<span class="line">                 det_resume_ckpt<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">                 <span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token builtin">super</span><span class="token punctuation">(</span>Trufor<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在BenCo框架中，我们可以通过向训练sh脚本<code>demo_train_trufor.sh</code>中传入同名字段并填入对应参数，即可正确初始化对应模型，<a href="https://github.com/scu-zjz/IMDLBenCo/blob/4c6a2937c3cae8d6ff26bf85e9bad0c5ec467468/IMDLBenCo/statics/model_zoo/runs/demo_train_trufor.sh#L14-L18" target="_blank" rel="noopener noreferrer">该位置链接</a>：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">    <span class="token parameter variable">--np_pretrain_weights</span> <span class="token string">&quot;/mnt/data0/dubo/workspace/IMDLBenCo/IMDLBenCo/model_zoo/trufor/noiseprint.pth&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--mit_b2_pretrain_weights</span> <span class="token string">&quot;/mnt/data0/dubo/workspace/IMDLBenCo/IMDLBenCo/model_zoo/trufor/mit_b2.pth&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--config_path</span> <span class="token string">&quot;./configs/trufor.yaml&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--phase</span> <span class="token number">2</span> <span class="token punctuation">\\</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要信息</p><p><strong>注意！！！Model_zoo中各个shell脚本中所有的超参数均为作者团队官方目前的实验最优情况。</strong></p></div><h2 id="预训练权重下载" tabindex="-1"><a class="header-anchor" href="#预训练权重下载"><span>预训练权重下载</span></a></h2><p>此外，不同的模型还会有自己的自定义参数，或者需要的预训练权重。</p><p>目前可以直接参考<a href="https://github.com/scu-zjz/IMDLBenCo/tree/main/IMDLBenCo/model_zoo" target="_blank" rel="noopener noreferrer">此路径</a>下的各个模型的文件夹内的README，下载所需的预训练权重。</p><h2 id="运行shell脚本" tabindex="-1"><a class="header-anchor" href="#运行shell脚本"><span>运行Shell脚本</span></a></h2><p>切换到根目录（同级目录下有train.py，test.py等脚本），然后直接运行如下指令即可：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">sh ./runs/demo_XXXX_XXXX.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>注意路径关系，保证配置文件和Python脚本能正确被Shell的指令索引到。</p><p>发现没有输出，不要慌张，为了保存日志，<strong>所有的输出和报错均被重定向到了文件。</strong></p><p>如果正确运行，则会在当前路径下生成一个名为<code>output_dir_xxx</code>或者<code>eval_dir_xxx</code>的文件夹，该文件夹内输出了三个日志，一个是正常的标准输出<code>logs.log</code>，一个是警告和报错<code>error.log</code>。还有一个独立的专门统计标量的<code>log.txt</code></p><p>如果模型运行正常，则应该可以在<code>logs.log</code>末尾看到模型不断地迭代输出新的日志：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">......</span>
<span class="line">[21:25:16.951899] Epoch: [0]  [ 0/80]  eta: 0:06:40  lr: 0.000000  predict_loss: 0.6421 (0.6421)  edge_loss: 0.9474 (0.9474)  label_loss: 0.3652 (0.3652)  combined_loss: 0.8752 (0.8752)  time: 5.0059  data: 1.5256  max mem: 18905</span>
<span class="line">[21:25:52.536949] Epoch: [0]  [20/80]  eta: 0:01:55  lr: 0.000002  predict_loss: 0.6255 (0.6492)  edge_loss: 0.9415 (0.9405)  label_loss: 0.3607 (0.3609)  combined_loss: 0.8660 (0.8707)  time: 1.7791  data: 0.0004  max mem: 20519</span>
<span class="line">[21:26:27.255074] Epoch: [0]  [40/80]  eta: 0:01:13  lr: 0.000005  predict_loss: 0.6497 (0.6615)  edge_loss: 0.9400 (0.9412)  label_loss: 0.3497 (0.3566)  combined_loss: 0.8729 (0.8730)  time: 1.7358  data: 0.0003  max mem: 20519</span>
<span class="line">[21:27:02.311510] Epoch: [0]  [60/80]  eta: 0:00:36  lr: 0.000007  predict_loss: 0.6255 (0.6527)  edge_loss: 0.9404 (0.9404)  label_loss: 0.3400 (0.3519)  combined_loss: 0.8643 (0.8708)  time: 1.7527  data: 0.0003  max mem: 20519</span>
<span class="line">......</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不正常，请在<code>error.log</code>中查找错误信息并解决。</p><p>所有的<code>checkpoint-XX.pth</code>也会输出到<code>output_dir_xxx</code>中，以供后续使用。</p><p><strong>强烈推荐通过如下指令使用TensorBoard监视训练过程，Benco提供了大量的自动API接口完成可视化，便于确认训练是否正常，并查看一些输出的mask结果。</strong></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">tensorboard --logdir ./</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>至此，就完成了对于SoTA Model的复现过程。</p>`,26)),a(p)])}const v=d(u,[["render",m]]),_=JSON.parse(`{"path":"/zh/guide/quickstart/1_model_zoo.html","title":"案例一：使用Model Zoo训练复现SoTA论文","lang":"zh-CN","frontmatter":{"description":"案例一：使用Model Zoo训练复现SoTA论文 我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。 总的来说IMDL-BenCo通过类似git、conda这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDLBenCo的...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/guide/quickstart/1_model_zoo.html"}],["meta",{"property":"og:url","content":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/zh/guide/quickstart/1_model_zoo.html"}],["meta",{"property":"og:site_name","content":"IMDLBenCo 文档"}],["meta",{"property":"og:title","content":"案例一：使用Model Zoo训练复现SoTA论文"}],["meta",{"property":"og:description","content":"案例一：使用Model Zoo训练复现SoTA论文 我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。 总的来说IMDL-BenCo通过类似git、conda这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDLBenCo的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-27T05:23:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-27T05:23:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"案例一：使用Model Zoo训练复现SoTA论文\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-27T05:23:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"通过benco init初始化","slug":"通过benco-init初始化","link":"#通过benco-init初始化","children":[]},{"level":2,"title":"修改传入数据集","slug":"修改传入数据集","link":"#修改传入数据集","children":[]},{"level":2,"title":"通过shell传入nn.module的超参数（语法糖）","slug":"通过shell传入nn-module的超参数-语法糖","link":"#通过shell传入nn-module的超参数-语法糖","children":[]},{"level":2,"title":"预训练权重下载","slug":"预训练权重下载","link":"#预训练权重下载","children":[]},{"level":2,"title":"运行Shell脚本","slug":"运行shell脚本","link":"#运行shell脚本","children":[]}],"git":{"updatedTime":1748323388000,"contributors":[{"name":"Ma Xiaochen (马晓晨)","username":"","email":"mxch1122@126.com","commits":5},{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":1,"url":"https://github.com/Sunnyhaze"}],"changelog":[{"hash":"8e1e3d3eae2912da7c3a8c3bfdae33e8baf92cd4","time":1748323388000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] revise doc for pre-trained weights part."},{"hash":"3adb8aa2f1fd3408eb9837aa011bf7048ae6230b","time":1743675138000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add comment plugin to all pages."},{"hash":"2e30180fb8a110e32a3aa5fe308d2e0a030c47ec","time":1743364035000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"Revise sturcture, add more infor about data &amp; models."},{"hash":"8c26dc30c467afbc8ec70ff807ceaca6c1a0e595","time":1725040789000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add document for model_zoo"},{"hash":"4096b890538ebb1db3d4d9cf6294f9bf8d86033c","time":1724930575000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] Add data_prepaere guide"},{"hash":"7e1307fd955cf7a4a7fb482371d24878dcc0dc73","time":1719931177000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] debug for &quot;edit on github'"}]},"filePathRelative":"zh/guide/quickstart/1_model_zoo.md","autoDesc":true}`);export{v as comp,_ as data};

import{_ as r,c,b as n,a as p,e,d as s,w as l,r as o,o as d}from"./app-CCtLKDl1.js";const u={};function m(k,a){const t=o("RouteLink"),i=o("CommentService");return d(),c("div",null,[a[7]||(a[7]=n("h1",{id:"案例四-推理并保存一个数据集的mask和label",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#案例四-推理并保存一个数据集的mask和label"},[n("span",null,"案例四：推理并保存一个数据集的mask和label")])],-1)),a[8]||(a[8]=n("p",null,"我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。",-1)),a[9]||(a[9]=n("p",null,[s("总的来说IMDL-BenCo通过类似"),n("code",null,"git"),s("、"),n("code",null,"conda"),s("这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDLBenCo的设计范式会非常轻松。")],-1)),n("p",null,[a[1]||(a[1]=s("无论如何，请先参考")),e(t,{to:"/zh/guide/quickstart/install.html"},{default:l(()=>a[0]||(a[0]=[s("安装")])),_:1}),a[2]||(a[2]=s("完成IMDL-BenCo的安装。"))]),a[10]||(a[10]=p('<div class="hint-container tip"><p class="hint-container-title">本章动机</p><p>在实际工程开发中，除了指标之外，实际的mask和label也是非常重要的，本章会告诉你如何轻松地推理并保存这些内容供您后续使用。</p></div><h2 id="更新版本" tabindex="-1"><a class="header-anchor" href="#更新版本"><span>更新版本</span></a></h2><p>本功能在IMDLBenCo的<a href="https://github.com/scu-zjz/IMDLBenCo/releases/tag/v0.1.36" target="_blank" rel="noopener noreferrer">v0.1.36版本</a>加入，请使用<code>benco -v</code>查看版本，必要时请更新到最新版本以使用推理功能。</p><h2 id="准备" tabindex="-1"><a class="header-anchor" href="#准备"><span>准备</span></a></h2><p>首先，你需要有一个待推理的数据集，和一个即将用于推理的模型和对应的checkpoint。</p>',5)),n("ul",null,[n("li",null,[a[4]||(a[4]=s("对于数据集：可以参考")),e(t,{to:"/zh/guide/quickstart/0_dataprepare.html"},{default:l(()=>a[3]||(a[3]=[s("数据集准备")])),_:1}),a[5]||(a[5]=s("进行构建。"))]),a[6]||(a[6]=n("li",null,[s("对于推理模型，你可以自己训练获得输出的checkpoint，也可以下载我们"),n("code",null,"model_zoo"),s("中提供的checkpoint。")],-1))]),a[11]||(a[11]=p(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>该功能可以在<code>benco init</code>和<code>benco init model_zoo</code>下使用，最新版本会在你的工作路径下生成<a href="https://github.com/scu-zjz/IMDLBenCo/blob/main/IMDLBenCo/training_scripts/test_save_images.py" target="_blank" rel="noopener noreferrer"><code>test_save_images.py</code></a>，该文件的<code>--checkpoint_path</code>读入<strong>一个具体的checkpoint文件</strong>（区别于test.py读入的是一个包含多个ckpt的文件夹）和一个整理好的数据集路径。</p><p>推理支持多卡加速，可以参考如下MVSS-Net使用的推理脚本构建shell脚本来启动推理和保存：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token assign-left variable">base_dir</span><span class="token operator">=</span><span class="token string">&quot;./save_img_dir_mvss&quot;</span></span>
<span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">\${base_dir}</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">CUDA_VISIBLE_DEVICES</span><span class="token operator">=</span><span class="token number">0,1</span>,2,3 <span class="token punctuation">\\</span></span>
<span class="line">torchrun  <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--standalone</span>    <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nnodes</span><span class="token operator">=</span><span class="token number">1</span>     <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--nproc_per_node</span><span class="token operator">=</span><span class="token number">4</span> <span class="token punctuation">\\</span></span>
<span class="line">./save_images.py <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--model</span> MVSSNet <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--edge_mask_width</span> <span class="token number">7</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--world_size</span> <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--test_data_path</span> <span class="token string">&quot;/mnt/data0/public_datasets/IML/CASIA1.0&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--checkpoint_path</span> <span class="token string">&quot;/mnt/data0/public_datasets/IML/IMDLBenCo_ckpt/checkpoint-mvss-casiav2.pth&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--test_batch_size</span> <span class="token number">2</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--image_size</span> <span class="token number">512</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--no_model_eval</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--if_resizing</span> <span class="token punctuation">\\</span>    <span class="token parameter variable">--output_dir</span> <span class="token variable">\${base_dir}</span>/ <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--log_dir</span> <span class="token variable">\${base_dir}</span>/ <span class="token punctuation">\\</span></span>
<span class="line"><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token variable">\${base_dir}</span>/error.log <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token variable">\${base_dir}</span>/logs.log</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>框架会自动根据<code>--if_resizing</code>和<code>--if_padding</code>来resize或者去掉多余的padding，确保数据集输入的图片和输出的mask尺寸一致。所有输出的图片会根据文件名保存到<code>--output_dir</code>对应的路径。注意，<strong>如果数据集中有同名的文件会覆盖</strong>，请小心，必要时对数据集的内容进行重命名。</p><p>此外，如果模型本身带<code>image-level</code>的输出，则框架会先根据GPU数量输出多个<code>pred_label_rank{rank}.json</code>，然后将所有的这些文件合并为一个最后的<code>pred_label_combined.json</code>。这个过程也会<strong>根据文件名去重</strong>。得到的json文件是模型对于每每张图片是否经过篡改预测的概率值，为0到1的浮点数，格式如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;Sp_D_CND_A_pla0005_pla0023_0281.jpg&quot;</span><span class="token operator">:</span> <span class="token number">0.9999610185623169</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Sp_D_CNN_A_art0024_ani0032_0268.jpg&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Sp_D_CNN_A_nat0085_ani0027_0271.jpg&quot;</span><span class="token operator">:</span> <span class="token number">0.9998431205749512</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Sp_D_CNN_A_sec0012_ani0007_0275.jpg&quot;</span><span class="token operator">:</span> <span class="token number">0.999996542930603</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Sp_D_CNN_R_art0017_art0090_0277.jpg&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;Sp_D_CRN_A_ani0036_ani0066_0372.jpg&quot;</span><span class="token operator">:</span> <span class="token number">1.0</span><span class="token punctuation">,</span></span>
<span class="line">    ...</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是不带<code>image-level</code>输出，只做segmentation的模型，则默认不会输出json，只输出图片。</p>`,8)),e(i)])}const b=r(u,[["render",m]]),g=JSON.parse('{"path":"/zh/guide/quickstart/4_save_images.html","title":"案例四：推理并保存一个数据集的mask和label","lang":"zh-CN","frontmatter":{"description":"案例四：推理并保存一个数据集的mask和label 我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。 总的来说IMDL-BenCo通过类似git、conda这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDLBenCo的...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/guide/quickstart/4_save_images.html"}],["meta",{"property":"og:url","content":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/zh/guide/quickstart/4_save_images.html"}],["meta",{"property":"og:site_name","content":"IMDLBenCo 文档"}],["meta",{"property":"og:title","content":"案例四：推理并保存一个数据集的mask和label"}],["meta",{"property":"og:description","content":"案例四：推理并保存一个数据集的mask和label 我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。 总的来说IMDL-BenCo通过类似git、conda这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDLBenCo的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-22T13:43:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-22T13:43:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"案例四：推理并保存一个数据集的mask和label\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-22T13:43:36.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"更新版本","slug":"更新版本","link":"#更新版本","children":[]},{"level":2,"title":"准备","slug":"准备","link":"#准备","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"updatedTime":1747921416000,"contributors":[{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":3,"url":"https://github.com/Sunnyhaze"}],"changelog":[{"hash":"e11c28d4fb2ea9379f97109216a361a43dc782d9","time":1747921416000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add comment services to case 4 and 5"},{"hash":"1c6f5ddc5a1699f6868598a5077fd120ca28e23a","time":1747542163000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add guide for complexity"},{"hash":"0f28991555d603a81ee5afc01a8ed2867b5f60bc","time":1747192936000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add demos for inference imags"}]},"filePathRelative":"zh/guide/quickstart/4_save_images.md","autoDesc":true}');export{b as comp,g as data};

import{_ as r,c as l,b as a,a as c,e as n,d as t,w as p,r as s,o as d}from"./app-CCtLKDl1.js";const m={};function h(u,e){const o=s("RouteLink"),i=s("CommentService");return d(),l("div",null,[e[3]||(e[3]=a("h1",{id:"case-five-obtaining-model-parameters-and-flops",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#case-five-obtaining-model-parameters-and-flops"},[a("span",null,"Case Five: Obtaining Model Parameters and FLOPs")])],-1)),e[4]||(e[4]=a("p",null,'We believe that the fastest way to learn is by "Learn by Doing" (learning by doing), so we will use a few examples to help users get started quickly.',-1)),e[5]||(e[5]=a("p",null,[t("In general, IMDL-BenCo helps you quickly complete the development of image tampering detection scientific research projects through command line calls similar to "),a("code",null,"git"),t(" and "),a("code",null,"conda"),t(". If you have learned front-end technologies such as vue, understanding the design paradigm of IMDLBenCo according to vue-cli will be very easy.")],-1)),a("p",null,[e[1]||(e[1]=t("Regardless, please refer to ")),n(o,{to:"/guide/quickstart/install.html"},{default:p(()=>e[0]||(e[0]=[t("Installation")])),_:1}),e[2]||(e[2]=t(" to complete the installation of IMDL-BenCo first."))]),e[6]||(e[6]=c(`<div class="hint-container tip"><p class="hint-container-title">Motivation for This Chapter</p><p>In scientific research and academic papers, we not only need to focus on whether the model&#39;s performance on the task is strong, but also need to pay attention to whether the model&#39;s performance improvement comes at the cost of huge computational overhead. This chapter can conveniently help you observe the complexity indicators of the models you implement in BenCo: FLOPs and Parameter count.</p></div><h2 id="technical-sources-of-this-feature" tabindex="-1"><a class="header-anchor" href="#technical-sources-of-this-feature"><span>Technical Sources of This Feature</span></a></h2><ul><li>This feature is implemented from the <code>fvcore.nn.FlopCountAnalysis</code> class in Facebook&#39;s <code>fvcore</code>.</li><li>For more information, please refer to: <a href="https://github.com/facebookresearch/fvcore/blob/main/docs/flop_count.md" target="_blank" rel="noopener noreferrer">fvcore/docs/flop_count.md</a></li></ul><h2 id="update-version" tabindex="-1"><a class="header-anchor" href="#update-version"><span>Update Version</span></a></h2><p>This feature was added in the <a href="https://github.com/scu-zjz/IMDLBenCo/releases/tag/v0.1.37" target="_blank" rel="noopener noreferrer">v0.1.37 version</a> of IMDLBenCo. Please use <code>benco -v</code> to check the version, and update to the latest version if necessary to use the complexity statistics feature.</p><h2 id="preparation" tabindex="-1"><a class="header-anchor" href="#preparation"><span>Preparation</span></a></h2><p>You only need to prepare the inference model to be tested, or directly call the existing models implemented in <code>model_zoo</code> through the registration mechanism.</p><p>Since it&#39;s just calculating complexity and not focusing on inference accuracy, you don&#39;t even need a checkpoint.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><p>This feature can be used under <code>benco init</code> and <code>benco init model_zoo</code>. The latest version will generate <a href="https://github.com/scu-zjz/IMDLBenCo/blob/main/IMDLBenCo/training_scripts/test_complexity.py" target="_blank" rel="noopener noreferrer"><code>test_complexity.py</code></a> in your working path. This file only needs to explicitly specify the model name, input image size, padding or resizing strategy.</p><p>In particular, if some models require additional information such as input edge_mask to perform inference, you can refer to the startup script of <code>MVSS-Net</code>:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">python ./test_complexity.py <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--model</span> MVSSNet <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--test_batch_size</span> <span class="token number">1</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--edge_mask_width</span> <span class="token number">7</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--image_size</span> <span class="token number">512</span> <span class="token punctuation">\\</span></span>
<span class="line">    <span class="token parameter variable">--if_resizing</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Since it&#39;s just testing complexity, a single card with a single <code>batch_size</code> is sufficient. Otherwise, FLOPs will increase proportionally with the increase in batch size.</p>`,13)),n(i)])}const g=r(m,[["render",h]]),b=JSON.parse('{"path":"/guide/quickstart/5_complexity.html","title":"Case Five: Obtaining Model Parameters and FLOPs","lang":"en-US","frontmatter":{"description":"Case Five: Obtaining Model Parameters and FLOPs We believe that the fastest way to learn is by \\"Learn by Doing\\" (learning by doing), so we will use a few examples to help users ...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/zh/guide/quickstart/5_complexity.html"}],["meta",{"property":"og:url","content":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/guide/quickstart/5_complexity.html"}],["meta",{"property":"og:site_name","content":"IMDLBenCo Documentation"}],["meta",{"property":"og:title","content":"Case Five: Obtaining Model Parameters and FLOPs"}],["meta",{"property":"og:description","content":"Case Five: Obtaining Model Parameters and FLOPs We believe that the fastest way to learn is by \\"Learn by Doing\\" (learning by doing), so we will use a few examples to help users ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-03T07:27:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-03T07:27:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Case Five: Obtaining Model Parameters and FLOPs\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-03T07:27:52.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Technical Sources of This Feature","slug":"technical-sources-of-this-feature","link":"#technical-sources-of-this-feature","children":[]},{"level":2,"title":"Update Version","slug":"update-version","link":"#update-version","children":[]},{"level":2,"title":"Preparation","slug":"preparation","link":"#preparation","children":[]},{"level":2,"title":"Usage","slug":"usage","link":"#usage","children":[]}],"git":{"updatedTime":1748935672000,"contributors":[{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":3,"url":"https://github.com/Sunnyhaze"}],"changelog":[{"hash":"5881d2810f379b27bd3fda00224e21bff66ea44d","time":1748935672000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add number for case 5"},{"hash":"e11c28d4fb2ea9379f97109216a361a43dc782d9","time":1747921416000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add comment services to case 4 and 5"},{"hash":"1c6f5ddc5a1699f6868598a5077fd120ca28e23a","time":1747542163000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add guide for complexity"}]},"filePathRelative":"guide/quickstart/5_complexity.md","autoDesc":true}');export{g as comp,b as data};

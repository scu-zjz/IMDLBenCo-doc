import{_ as a}from"./demo--WtJ5ARF.js";import{_ as e,c as t,a as p,e as i,r as o,o as l}from"./app-CCtLKDl1.js";const c={};function u(r,n){const s=o("CommentService");return l(),t("div",null,[n[0]||(n[0]=p('<h1 id="数据集准备" tabindex="-1"><a class="header-anchor" href="#数据集准备"><span>数据集准备</span></a></h1><h2 id="重要" tabindex="-1"><a class="header-anchor" href="#重要"><span>重要</span></a></h2><p>数据集部分的功能和接口会在后续版本中由benco CLI统一管理。</p><p>目前暂时需要手动在每一个工作路径下管理相应的<code>json</code>或数据集路径完成部署。</p><h2 id="篡改检测任务数据集简介" tabindex="-1"><a class="header-anchor" href="#篡改检测任务数据集简介"><span>篡改检测任务数据集简介</span></a></h2><ul><li>目前篡改检测一般包含两种任务： <ul><li><strong>以Detection形式组织</strong>，对一张图整图进行image-level的二分类，判断这张图是否是篡改的。</li><li><strong>以Segmentation形式组织</strong>，对一张图生成一个pixel-level的二分类mask，分割出篡改区域。</li></ul></li><li>所以，一般来说，一个篡改检测数据集的一条记录包含如下内容： <ul><li>一张篡改图像，image</li><li>一张对应的篡改区域的二值mask</li><li>一个0，1标签，代表这张图是否被篡改。</li></ul></li><li>以下是两对典型的篡改图像图和对应的mask： <ul><li><img src="'+a+`" alt=""></li></ul></li><li>很多论文只使用“仅包含篡改图像的数据集”。最近一些论文会尝试引入真图一起训练，虽然可以降低假阳性率，但是会导致总体的指标略微降低（模型会倾向于不预测，错过一些阳性点）。</li></ul><h2 id="数据集格式和特点" tabindex="-1"><a class="header-anchor" href="#数据集格式和特点"><span>数据集格式和特点</span></a></h2><ul><li>IMDL-BenCo内部实现了3种不同的数据集格式，对应不同的数据集组织方式，可以根据需求将各种篡改数据集组织为这样的格式来让框架进行读取。</li><li>IMDL-BenCo预设的数据集格式包含两个基础的<code>JsonDataset</code>和<code>ManiDataset</code>，用于读取单个数据集。以及一个<code>BalanceDataset</code>，它按照一种特殊的采样策略同时管理多个数据集。将数据集按照这三种方式的任何一种组织好，即可由IMDL-BenCo读取。它们的具体介绍如下： <ul><li><code>ManiDataset</code>，自动读取一个路径下的两个文件夹（需要命名为<code>./Tp</code>和<code>./Gt</code>）下的所有图片，分别作为待测图像和对应的mask。适合轻量开发，且<strong>不需要引入真实图片</strong>的场合。</li><li><code>JsonDataset</code>，通过一个Json文件索引到所需数据的路径，适合<strong>需要引入真实图片</strong>的场合。</li><li><code>BalancedDataset</code>，这种数据集管理了一个字典，存放了多个<code>ManiDataset</code>或<code>JsonDataset</code>对象，在每一个Epoch分别从它所包含的所有子数据集中<strong>随机采样n张图片</strong>（默认只采样1800张）进行，所以实际<code>一个Epoch参与训练的图片数量=数据集数量 × n</code>，但当数据集足够大时，多个Epoch下图片的丰富度仍然可以很高。并且，避免训练后的模型过于向大数据集“过拟合”。<code>BalancedDataset</code>主要针对<a href="https://openaccess.thecvf.com/content/WACV2021/html/Kwon_CAT-Net_Compression_Artifact_Tracing_Network_for_Detection_and_Localization_of_WACV_2021_paper.html" target="_blank" rel="noopener noreferrer">CAT-Net</a> 和 <a href="https://openaccess.thecvf.com/content/CVPR2023/html/Guillaro_TruFor_Leveraging_All-Round_Clues_for_Trustworthy_Image_Forgery_Detection_and_CVPR_2023_paper.html" target="_blank" rel="noopener noreferrer">TruFor</a>的协议设计，如果不针对该协议复现则不需要关注。</li></ul></li></ul><p>上述数据集可以用于直接训练或测试。此外，在测试为了提高效率，可以在一轮脚本中依次测试多个不同的数据集，所以额外定义了一种Json格式用于输入大量数据集，在本段末尾有样例。</p><h2 id="具体定义格式" tabindex="-1"><a class="header-anchor" href="#具体定义格式"><span>具体定义格式</span></a></h2><ol><li><p><code>ManiDataset</code>，<strong>传入一个文件夹路径</strong>，该文件夹包含两个子文件夹<code>Tp</code>和<code>Gt</code>，benco自动从<code>Tp</code>中读取图片，从<code>Gt</code>中读取对应mask，并自动按照<code>字典序</code>将两个文件夹下的所有图片文件逐一配对，得到完整数据集。可以参考<a href="https://github.com/SunnyHaze/IML-ViT/tree/main/images/sample_iml_dataset" target="_blank" rel="noopener noreferrer">IML-ViT中的样例文件夹</a>。</p></li><li><p><code>JsonDataset</code>，<strong>传入一个JSON文件路径</strong>，使用如下JSON格式组织图片和对应mask：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">[</span>
<span class="line">    [</span>
<span class="line">      &quot;/Dataset/CASIAv2/Tp/Tp_D_NRN_S_N_arc00013_sec00045_11700.jpg&quot;,</span>
<span class="line">      &quot;/Dataset/CASIAv2/Gt/Tp_D_NRN_S_N_arc00013_sec00045_11700_gt.png&quot;</span>
<span class="line">    ],</span>
<span class="line">    ......</span>
<span class="line">    [</span>
<span class="line">      &quot;/Dataset/CASIAv2/Au/Au_nat_30198.jpg&quot;,</span>
<span class="line">      &quot;Negative&quot;</span>
<span class="line">    ],</span>
<span class="line">    ......</span>
<span class="line">]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中“Negative”表示全黑的mask，即完全真实的图片，所以也不需要输入path。</p></li><li><p><code>BalancedDatast</code>，传入一个JSON文件路径，用于组织生成多个子数据集，并在使用时从这些子数据集中采样。，专门用来组织<a href="https://openaccess.thecvf.com/content/WACV2021/html/Kwon_CAT-Net_Compression_Artifact_Tracing_Network_for_Detection_and_Localization_of_WACV_2021_paper.html" target="_blank" rel="noopener noreferrer">CAT-Net</a>和<a href="https://openaccess.thecvf.com/content/CVPR2023/html/Guillaro_TruFor_Leveraging_All-Round_Clues_for_Trustworthy_Image_Forgery_Detection_and_CVPR_2023_paper.html" target="_blank" rel="noopener noreferrer">TruFor</a>中使用的协议。</p><ol><li>协议具体定义：Protocol-CAT使用到了9个大数据集进行训练，但是每一个Epoch只从每个数据集中随机采样1800张图组成一个16200张图的数据集完成训练。</li><li>Json组织形式：</li></ol><div class="language-JSON line-numbers-mode" data-highlighter="prismjs" data-ext="JSON"><pre><code><span class="line">[</span>
<span class="line">   [</span>
<span class="line">       &quot;ManiDataset&quot;,</span>
<span class="line">       &quot;/mnt/data0/public_datasets/IML/CASIA2.0&quot;</span>
<span class="line">   ],</span>
<span class="line">   [</span>
<span class="line">       &quot;JsonDataset&quot;,</span>
<span class="line">       &quot;/mnt/data0/public_datasets/IML/FantasticReality_v1/FantasticReality.json&quot;</span>
<span class="line">   ],</span>
<span class="line">   [</span>
<span class="line">       &quot;ManiDataset&quot;,</span>
<span class="line">       &quot;/mnt/data0/public_datasets/IML/IMD_20_1024&quot;</span>
<span class="line">   ],</span>
<span class="line">   [</span>
<span class="line">        &quot;JsonDataset&quot;,</span>
<span class="line">        &quot;/mnt/data0/public_datasets/IML/compRAISE/compRAISE_1024_list.json&quot;</span>
<span class="line">  ],</span>
<span class="line">   [</span>
<span class="line">       &quot;JsonDataset&quot;,</span>
<span class="line">       &quot;/mnt/data0/public_datasets/IML/tampCOCO/sp_COCO_list.json&quot;</span>
<span class="line">   ],</span>
<span class="line">   [</span>
<span class="line">       &quot;JsonDataset&quot;,</span>
<span class="line">       &quot;/mnt/data0/public_datasets/IML/tampCOCO/cm_COCO_list.json&quot;</span>
<span class="line">   ],</span>
<span class="line">   [</span>
<span class="line">       &quot;JsonDataset&quot;,</span>
<span class="line">       &quot;/mnt/data0/public_datasets/IML/tampCOCO/bcm_COCO_list.json&quot;</span>
<span class="line">   ],</span>
<span class="line">   [</span>
<span class="line">       &quot;JsonDataset&quot;,</span>
<span class="line">       &quot;/mnt/data0/public_datasets/IML/tampCOCO/bcmc_COCO_list.json&quot;</span>
<span class="line">   ]</span>
<span class="line">]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二维数组，每一行代表一个数据集，第一列代表使用到的数据集Class类型的字符串（按照<code>ManiDataset</code>或<code>JsonDataset</code>的组织方式读取对应数据集），第二列是该类型需要读取数据集的路径。</p></li></ol><p>将需要用的数据集按照需求，组织好后，即可开始考虑复现模型或实现自己的模型。</p><p>除了格式需要注意，为了提高训练测试速度，还需要对图片进行必要的预处理。</p><h2 id="对于高分辨率图片的预处理" tabindex="-1"><a class="header-anchor" href="#对于高分辨率图片的预处理"><span>对于高分辨率图片的预处理</span></a></h2><p>有一些数据集本身有很高的分辨率，比如NIST16和CAT-Protocol中的compRAISE数据集都含有4000x4000的图片。这些数据集如果在训练时直接读取会带来极高的I/O负担。尤其是作为训练数据集时。</p><p>所以我们尤其建议使用这些数据集时提前将图片resize到小尺寸，比如保持长宽比的情况下缩小到长边等于1024。否则训练速度可能会被极大拖慢，请参考<a href="https://github.com/scu-zjz/IMDLBenCo/issues/40" target="_blank" rel="noopener noreferrer">IMDL-BenCo issue #40</a>。</p><p>我们这里提供一个基于线程池的Resize代码，可以高效地通过多线程将一个路径下的所有图片转换为期望的分辨率：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image</span>
<span class="line"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">process_image</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> directory<span class="token punctuation">,</span> output_directory<span class="token punctuation">,</span> target_size<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">with</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>directory<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> img<span class="token punctuation">:</span></span>
<span class="line">            width<span class="token punctuation">,</span> height <span class="token operator">=</span> img<span class="token punctuation">.</span>size</span>
<span class="line">            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Processing Image: </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string"> | Resolution: </span><span class="token interpolation"><span class="token punctuation">{</span>width<span class="token punctuation">}</span></span><span class="token string">x</span><span class="token interpolation"><span class="token punctuation">{</span>height<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># 确定长边为1024的缩放比例</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token builtin">max</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span> <span class="token operator">&gt;</span> target_size<span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">if</span> width <span class="token operator">&gt;</span> height<span class="token punctuation">:</span></span>
<span class="line">                    new_width <span class="token operator">=</span> target_size</span>
<span class="line">                    new_height <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target_size <span class="token operator">/</span> width<span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                    new_height <span class="token operator">=</span> target_size</span>
<span class="line">                    new_width <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>target_size <span class="token operator">/</span> height<span class="token punctuation">)</span> <span class="token operator">*</span> width<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment"># 调整图片尺寸</span></span>
<span class="line">                img_resized <span class="token operator">=</span> img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span>new_width<span class="token punctuation">,</span> new_height<span class="token punctuation">)</span><span class="token punctuation">,</span> Image<span class="token punctuation">.</span>ANTIALIAS<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token comment"># 保存图片到指定文件夹</span></span>
<span class="line">                output_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_directory<span class="token punctuation">,</span> filename<span class="token punctuation">)</span></span>
<span class="line">                img_resized<span class="token punctuation">.</span>save<span class="token punctuation">(</span>output_path<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Resized and saved </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token punctuation">{</span>output_directory<span class="token punctuation">}</span></span><span class="token string"> with resolution </span><span class="token interpolation"><span class="token punctuation">{</span>new_width<span class="token punctuation">}</span></span><span class="token string">x</span><span class="token interpolation"><span class="token punctuation">{</span>new_height<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment"># 如果图片不需要调整，直接复制到目标文件夹</span></span>
<span class="line">                img<span class="token punctuation">.</span>save<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>output_directory<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;Image </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string"> already meets the target size and was saved without resizing.&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token comment"># 返回处理成功的计数</span></span>
<span class="line">    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Cannot process </span><span class="token interpolation"><span class="token punctuation">{</span>filename<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token comment"># 返回处理失败的计数</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">get_image_resolutions_and_resize</span><span class="token punctuation">(</span>directory<span class="token operator">=</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">,</span> output_directory<span class="token operator">=</span><span class="token string">&#39;resized_images&#39;</span><span class="token punctuation">,</span> target_size<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 创建输出文件夹，如果不存在则创建</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>output_directory<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>output_directory<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 获取所有图片文件</span></span>
<span class="line">    image_files <span class="token operator">=</span> <span class="token punctuation">[</span>f <span class="token keyword">for</span> f <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>directory<span class="token punctuation">)</span> <span class="token keyword">if</span> f<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;png&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jpeg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bmp&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gif&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tiff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># 使用线程池处理图片</span></span>
<span class="line">    total_processed <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span></span>
<span class="line">        futures <span class="token operator">=</span> <span class="token punctuation">[</span>executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>process_image<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> directory<span class="token punctuation">,</span> output_directory<span class="token punctuation">,</span> target_size<span class="token punctuation">)</span> <span class="token keyword">for</span> filename <span class="token keyword">in</span> image_files<span class="token punctuation">]</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment"># 等待所有线程完成并累加处理的数量</span></span>
<span class="line">        <span class="token keyword">for</span> future <span class="token keyword">in</span> futures<span class="token punctuation">:</span></span>
<span class="line">            total_processed <span class="token operator">+=</span> future<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># 输出总图片数量</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;\\nTotal number of images processed: </span><span class="token interpolation"><span class="token punctuation">{</span>total_processed<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 执行函数</span></span>
<span class="line">get_image_resolutions_and_resize<span class="token punctuation">(</span></span>
<span class="line">    directory<span class="token operator">=</span><span class="token string">&quot;./compRAISE&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    output_directory<span class="token operator">=</span><span class="token string">&quot;./compRAISE1024&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    target_size<span class="token operator">=</span><span class="token number">1024</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试用数据集json" tabindex="-1"><a class="header-anchor" href="#测试用数据集json"><span>测试用数据集JSON</span></a></h2><p>特别的，对于测试时，因为要分别在多个数据集上完成批量测试，所以专门定义一个<code>test_dataset.json</code>来完成这个功能。因为是测试阶段，所以只能传入代表<code>ManiDataset</code>或<code>JsonDataset</code>的路径作为测试集；区别于<code>BalancedDataset</code>只能用于训练。</p><p>Key为Tensorboard，日志输出等等Visualize功能时使用的字段名，Value为上述数据集的具体路径。</p><p>一个<code>test_datasets.json</code>样例，直接传该json的路径给训练脚本作为测试集即可（后文会介绍）：</p><div class="language-JSON line-numbers-mode" data-highlighter="prismjs" data-ext="JSON"><pre><code><span class="line">{</span>
<span class="line">    &quot;Columbia&quot;: &quot;/mnt/data0/public_datasets/IML/Columbia.json&quot;,</span>
<span class="line">    &quot;NIST16_1024&quot;: &quot;/mnt/data0/public_datasets/IML/NIST16_1024&quot;,</span>
<span class="line">    &quot;NIST16_cleaned&quot;: &quot;/mnt/data0/public_datasets/IML/NIST16_1024_cleaning&quot;,</span>
<span class="line">    &quot;coverage&quot;: &quot;/mnt/data0/public_datasets/IML/coverage.json&quot;,</span>
<span class="line">    &quot;CASIAv1&quot;: &quot;/mnt/data0/public_datasets/IML/CASIA1.0&quot;,</span>
<span class="line">    &quot;IMD20_1024&quot;: &quot;/mnt/data0/public_datasets/IML/IMD_20_1024&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23)),i(s)])}const k=e(c,[["render",u]]),v=JSON.parse('{"path":"/zh/guide/quickstart/0_dataprepare.html","title":"数据集准备","lang":"zh-CN","frontmatter":{"description":"数据集准备 重要 数据集部分的功能和接口会在后续版本中由benco CLI统一管理。 目前暂时需要手动在每一个工作路径下管理相应的json或数据集路径完成部署。 篡改检测任务数据集简介 目前篡改检测一般包含两种任务： 以Detection形式组织，对一张图整图进行image-level的二分类，判断这张图是否是篡改的。 以Segmentation形式组...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/guide/quickstart/0_dataprepare.html"}],["meta",{"property":"og:url","content":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/zh/guide/quickstart/0_dataprepare.html"}],["meta",{"property":"og:site_name","content":"IMDLBenCo 文档"}],["meta",{"property":"og:title","content":"数据集准备"}],["meta",{"property":"og:description","content":"数据集准备 重要 数据集部分的功能和接口会在后续版本中由benco CLI统一管理。 目前暂时需要手动在每一个工作路径下管理相应的json或数据集路径完成部署。 篡改检测任务数据集简介 目前篡改检测一般包含两种任务： 以Detection形式组织，对一张图整图进行image-level的二分类，判断这张图是否是篡改的。 以Segmentation形式组..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/images/assets/demo.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-04-03T10:12:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-03T10:12:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据集准备\\",\\"image\\":[\\"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/images/assets/demo.png\\"],\\"dateModified\\":\\"2025-04-03T10:12:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"重要","slug":"重要","link":"#重要","children":[]},{"level":2,"title":"篡改检测任务数据集简介","slug":"篡改检测任务数据集简介","link":"#篡改检测任务数据集简介","children":[]},{"level":2,"title":"数据集格式和特点","slug":"数据集格式和特点","link":"#数据集格式和特点","children":[]},{"level":2,"title":"具体定义格式","slug":"具体定义格式","link":"#具体定义格式","children":[]},{"level":2,"title":"对于高分辨率图片的预处理","slug":"对于高分辨率图片的预处理","link":"#对于高分辨率图片的预处理","children":[]},{"level":2,"title":"测试用数据集JSON","slug":"测试用数据集json","link":"#测试用数据集json","children":[]}],"git":{"updatedTime":1743675138000,"contributors":[{"name":"Ma Xiaochen (马晓晨)","username":"","email":"mxch1122@126.com","commits":8}],"changelog":[{"hash":"3adb8aa2f1fd3408eb9837aa011bf7048ae6230b","time":1743675138000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add comment plugin to all pages."},{"hash":"2e30180fb8a110e32a3aa5fe308d2e0a030c47ec","time":1743364035000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"Revise sturcture, add more infor about data &amp; models."},{"hash":"9e1ccd549ba841731ff39d78ab11cd08d1c26564","time":1743322393000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] revise description reltated to BalancedDatasets."},{"hash":"ccd6ad1772c39ae5a7d55b205e729e92aa5d4ac5","time":1727242612000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add compRAISE_1024.json to guidance"},{"hash":"2c864183d9a9f6b2d1b517189d46c6a27a3ba2a2","time":1727241998000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add dataset preprocessing guide"},{"hash":"8c26dc30c467afbc8ec70ff807ceaca6c1a0e595","time":1725040789000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add document for model_zoo"},{"hash":"6de34ba84e800741a8134cad3c0a4c9925e096ef","time":1724932687000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add guide and dataprepare process"},{"hash":"4096b890538ebb1db3d4d9cf6294f9bf8d86033c","time":1724930575000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] Add data_prepaere guide"}]},"filePathRelative":"zh/guide/quickstart/0_dataprepare.md","autoDesc":true}');export{k as comp,v as data};

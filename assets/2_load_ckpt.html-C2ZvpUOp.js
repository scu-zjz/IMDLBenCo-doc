import{_ as c,c as l,b as n,a as p,e as t,d as a,w as d,r as s,o as r}from"./app-CCtLKDl1.js";const u={};function m(h,e){const o=s("RouteLink"),i=s("CommentService");return r(),l("div",null,[e[3]||(e[3]=n("h1",{id:"案例二-使用model-zoo配合checkpoint快速测试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#案例二-使用model-zoo配合checkpoint快速测试"},[n("span",null,"案例二：使用Model Zoo配合checkpoint快速测试")])],-1)),e[4]||(e[4]=n("p",null,"我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。",-1)),e[5]||(e[5]=n("p",null,[a("总的来说IMDL-BenCo通过类似"),n("code",null,"git"),a("、"),n("code",null,"conda"),a("这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDLBenCo的设计范式会非常轻松。")],-1)),n("p",null,[e[1]||(e[1]=a("无论如何，请先参考")),t(o,{to:"/zh/guide/quickstart/install.html"},{default:d(()=>e[0]||(e[0]=[a("安装")])),_:1}),e[2]||(e[2]=a("完成IMDL-BenCo的安装。"))]),e[6]||(e[6]=p(`<div class="hint-container tip"><p class="hint-container-title">本章动机</p><p>本章提供了按照<a href="https://proceedings.neurips.cc/paper_files/paper/2024/hash/f280a398c243b5fdaa09f57ece880fc9-Abstract-Datasets_and_Benchmarks_Track.html" target="_blank" rel="noopener noreferrer">IMDL-BenCo论文</a>中大部分实验中用到的checkpoint，可以根据本案例完成推理和指标测试，无需训练。</p></div><h2 id="checkpoint-链接" tabindex="-1"><a class="header-anchor" href="#checkpoint-链接"><span>Checkpoint 链接</span></a></h2><p>我们在百度网盘公开了一些我们论文中report的指标所使用的模型权重以供参考。根据模型名称以及训练时使用的数据集命名，在百度网盘的下载链接如下：</p><ul><li>百度网盘：imdlbenco_ckpt <ul><li>链接: <a href="https://pan.baidu.com/s/1DtkOwLCTunvI3d_GAAj2Dg?pwd=bchm" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1DtkOwLCTunvI3d_GAAj2Dg?pwd=bchm</a> 、</li><li>提取码: bchm</li></ul></li><li>Google Drive: IMDLBenCo_ckpt <ul><li>Link:<a href="https://drive.google.com/drive/folders/1DCqc016-N4YvoMKKA87bFtrCdPVIDxAp?usp=sharing" target="_blank" rel="noopener noreferrer">https://drive.google.com/drive/folders/1DCqc016-N4YvoMKKA87bFtrCdPVIDxAp?usp=sharing</a></li></ul></li></ul><h2 id="需要注意的格式问题" tabindex="-1"><a class="header-anchor" href="#需要注意的格式问题"><span>需要注意的格式问题</span></a></h2><p>因为<code>train.py</code>得到的checkpoint-xx.pth需要同时保存模型权重，优化器参数，以及scaler参数，所以当使用<code>torch.load(&quot;checkpoint-xx.pth&quot;)</code>后可以看到它按照字典形式组织，包括了model，optimizer等等很多参数，会导致整个checkpoint是三倍于单纯的模型权重的大小。其形式大致如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;model&quot;: &lt;state_dict of model&gt;,</span>
<span class="line">    &quot;optimizer&quot;: &lt;state_dict of model&gt;,</span>
<span class="line">    ......</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了节省网盘空间，所以本工作release的checkpoint只保留了“model&quot;字段，丢弃了其余字段进行上传。但不影响正常复现和Evaluation。如下所示。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">ckpt_name <span class="token operator">=</span> <span class="token string">&quot;iml_vit_casiav2.pth&quot;</span></span>
<span class="line">path_ckpt <span class="token operator">=</span> <span class="token string">&quot;/mnt/data0/public_datasets/IML/IMDLBenCo_ckpt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line">full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path_ckpt<span class="token punctuation">,</span> ckpt_name<span class="token punctuation">)</span></span>
<span class="line">obj <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 结果为：</span></span>
<span class="line"><span class="token comment"># dict_keys([&#39;model&#39;])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何使用下载的checkpoint完成推理" tabindex="-1"><a class="header-anchor" href="#如何使用下载的checkpoint完成推理"><span>如何使用下载的checkpoint完成推理</span></a></h2><ol><li>我们建议首先通过<code>benco init model_zoo</code>在一个路径下，比如<code>/mnt/data0/xiaochen/workspace/test_benco/imlvit_inference</code>，生成model_zoo的所有代码文件。（如果不清楚请参考上一章）</li><li>而后，下载对应的checkpoint后，模仿<code>train.py</code>输出checkpoint的格式将其拷贝并修改文件名到一个路径下。比如你可以将<code>iml_vit_casiav2.pth</code>修改为<code>checkpoint-0.pth</code>，然后将其放在一个空文件夹<code>/mnt/data0/xiaochen/workspace/test_benco/imlvit_inference/ckpts/</code>下。</li><li>这样，你修改对应的<code>demo_test_iml_vit.sh</code>中的<code>--checkpoint_path</code>字段为这个文件夹路径即可。只要配置好相应的数据集路径，即可通过执行如下指令自动执行推理过程并观察结果。</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sh</span> ./runs/demo_test_iml_vit.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12)),t(i)])}const v=c(u,[["render",m]]),b=JSON.parse('{"path":"/zh/guide/quickstart/2_load_ckpt.html","title":"案例二：使用Model Zoo配合checkpoint快速测试","lang":"zh-CN","frontmatter":{"description":"案例二：使用Model Zoo配合checkpoint快速测试 我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。 总的来说IMDL-BenCo通过类似git、conda这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDL...","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/guide/quickstart/2_load_ckpt.html"}],["meta",{"property":"og:url","content":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/zh/guide/quickstart/2_load_ckpt.html"}],["meta",{"property":"og:site_name","content":"IMDLBenCo 文档"}],["meta",{"property":"og:title","content":"案例二：使用Model Zoo配合checkpoint快速测试"}],["meta",{"property":"og:description","content":"案例二：使用Model Zoo配合checkpoint快速测试 我们认为学习最快的方式就是“Learn by Doing”（边做边学），所以通过几个案例来帮助使用者快速上手。 总的来说IMDL-BenCo通过类似git、conda这样的命令行调用方式帮助你快速完成图像篡改检测科研项目的开发。如果你学过vue等前端技术，那按照vue-cli来理解IMDL..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-05-05T09:14:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-05T09:14:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"案例二：使用Model Zoo配合checkpoint快速测试\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-05T09:14:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Checkpoint 链接","slug":"checkpoint-链接","link":"#checkpoint-链接","children":[]},{"level":2,"title":"需要注意的格式问题","slug":"需要注意的格式问题","link":"#需要注意的格式问题","children":[]},{"level":2,"title":"如何使用下载的checkpoint完成推理","slug":"如何使用下载的checkpoint完成推理","link":"#如何使用下载的checkpoint完成推理","children":[]}],"git":{"updatedTime":1746436448000,"contributors":[{"name":"Ma Xiaochen (马晓晨)","username":"","email":"mxch1122@126.com","commits":3},{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":2,"url":"https://github.com/Sunnyhaze"}],"changelog":[{"hash":"c7f3d7610a204bb4c2908a60d5d12ef757e03c4a","time":1746436448000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[debug] revise typo for previous commit"},{"hash":"5ac531197a7293bf596fae282876e2d9b22a0c4c","time":1746436265000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add google drive link"},{"hash":"3adb8aa2f1fd3408eb9837aa011bf7048ae6230b","time":1743675138000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add comment plugin to all pages."},{"hash":"2e30180fb8a110e32a3aa5fe308d2e0a030c47ec","time":1743364035000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"Revise sturcture, add more infor about data &amp; models."},{"hash":"8aa6c505feb4f4452d5ab0e9f5d8207d6da4273d","time":1741689276000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[add] add description for checkpoints on baidu netdisk"}]},"filePathRelative":"zh/guide/quickstart/2_load_ckpt.md","autoDesc":true}');export{v as comp,b as data};

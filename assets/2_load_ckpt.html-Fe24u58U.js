import{_ as l,c,b as t,a as r,e as a,d as n,w as p,r as o,o as d}from"./app-CCtLKDl1.js";const h={};function u(m,e){const s=o("RouteLink"),i=o("CommentService");return d(),c("div",null,[e[3]||(e[3]=t("h1",{id:"case-two-using-model-zoo-with-checkpoint-for-quick-testing",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#case-two-using-model-zoo-with-checkpoint-for-quick-testing"},[t("span",null,"Case Two: Using Model Zoo with Checkpoint for Quick Testing")])],-1)),e[4]||(e[4]=t("p",null,'We believe that the fastest way to learn is "Learn by Doing," so we provide several cases to help users get started quickly.',-1)),e[5]||(e[5]=t("p",null,[n("Overall, IMDL-BenCo helps you quickly complete the development of image tampering detection research projects through command-line calls similar to "),t("code",null,"git"),n(" and "),t("code",null,"conda"),n(". If you have learned front-end technologies like vue, understanding the design pattern of IMDLBenCo according to vue-cli will be very easy.")],-1)),t("p",null,[e[1]||(e[1]=n("Regardless, please refer to ")),a(s,{to:"/guide/quickstart/install.html"},{default:p(()=>e[0]||(e[0]=[n("Installation")])),_:1}),e[2]||(e[2]=n(" to complete the installation of IMDL-BenCo first."))]),e[6]||(e[6]=r(`<div class="hint-container tip"><p class="hint-container-title">Motivation of This Chapter</p><p>This chapter provides checkpoints used in most of the experiments in the <a href="https://proceedings.neurips.cc/paper_files/paper/2024/hash/f280a398c243b5fdaa09f57ece880fc9-Abstract-Datasets_and_Benchmarks_Track.html" target="_blank" rel="noopener noreferrer">IMDL-BenCo paper</a>, allowing you to complete reasoning and metric testing according to this case without training.</p></div><h2 id="checkpoint-links" tabindex="-1"><a class="header-anchor" href="#checkpoint-links"><span>Checkpoint Links</span></a></h2><p>We have made some model weights used in our reported metrics in the paper publicly available on Baidu Netdisk for reference. According to the model name and the dataset used during training, the download link on Baidu Netdisk is as follows:</p><ul><li>Baidu Netdisk: imdlbenco_ckpt <ul><li>Link: <a href="https://pan.baidu.com/s/1DtkOwLCTunvI3d_GAAj2Dg?pwd=bchm" target="_blank" rel="noopener noreferrer">https://pan.baidu.com/s/1DtkOwLCTunvI3d_GAAj2Dg?pwd=bchm</a> ,</li><li>Extraction Code: bchm</li></ul></li><li>Google Drive: IMDLBenCo_ckpt <ul><li>Link:<a href="https://drive.google.com/drive/folders/1DCqc016-N4YvoMKKA87bFtrCdPVIDxAp?usp=sharing" target="_blank" rel="noopener noreferrer">https://drive.google.com/drive/folders/1DCqc016-N4YvoMKKA87bFtrCdPVIDxAp?usp=sharing</a></li></ul></li></ul><h2 id="format-issues-to-note" tabindex="-1"><a class="header-anchor" href="#format-issues-to-note"><span>Format Issues to Note</span></a></h2><p>Since the checkpoint-xx.pth obtained from <code>train.py</code> needs to save model weights, optimizer parameters, and scaler parameters at the same time, when using <code>torch.load(&quot;checkpoint-xx.pth&quot;)</code>, you can see that it is organized in the form of a dictionary, including model, optimizer, and many other parameters, which makes the entire checkpoint three times the size of the pure model weights. The form is roughly as follows:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;model&quot;: &lt;state_dict of model&gt;,</span>
<span class="line">    &quot;optimizer&quot;: &lt;state_dict of optimizer&gt;,</span>
<span class="line">    ......</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To save space on the netdisk, the checkpoint released in this work only retains the &quot;model&quot; field and discards the rest of the fields for upload. However, it does not affect normal reproduction and Evaluation. As shown below.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">ckpt_name <span class="token operator">=</span> <span class="token string">&quot;iml_vit_casiav2.pth&quot;</span></span>
<span class="line">path_ckpt <span class="token operator">=</span> <span class="token string">&quot;/mnt/data0/public_datasets/IML/IMDLBenCo_ckpt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> torch</span>
<span class="line"><span class="token keyword">import</span> os</span>
<span class="line">full_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path_ckpt<span class="token punctuation">,</span> ckpt_name<span class="token punctuation">)</span></span>
<span class="line">obj <span class="token operator">=</span> torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>full_path<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Result is:</span></span>
<span class="line"><span class="token comment"># dict_keys([&#39;model&#39;])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="how-to-use-the-downloaded-checkpoint-for-inference" tabindex="-1"><a class="header-anchor" href="#how-to-use-the-downloaded-checkpoint-for-inference"><span>How to Use the Downloaded Checkpoint for Inference</span></a></h2><ol><li>We recommend first using <code>benco init model_zoo</code> to generate all the code files of model_zoo in a path, for example, <code>/mnt/data0/xiaochen/workspace/test_benco/imlvit_inference</code>. (If you are not clear, please refer to the previous chapter)</li><li>After downloading the corresponding checkpoint, copy and modify the file name to a path in the format output by <code>train.py</code>. For example, you can change <code>iml_vit_casiav2.pth</code> to <code>checkpoint-0.pth</code>, and then place it in an empty folder <code>/mnt/data0/xiaochen/workspace/test_benco/imlvit_inference/ckpts/</code>.</li><li>In this way, you can modify the <code>--checkpoint_path</code> field in the corresponding <code>demo_test_iml_vit.sh</code> to this folder path. As long as the corresponding dataset path is configured, you can automatically execute the inference process and observe the results by executing the following command.</li></ol><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">sh</span> ./runs/demo_test_iml_vit.sh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12)),a(i)])}const k=l(h,[["render",u]]),f=JSON.parse('{"path":"/guide/quickstart/2_load_ckpt.html","title":"Case Two: Using Model Zoo with Checkpoint for Quick Testing","lang":"en-US","frontmatter":{"description":"Case Two: Using Model Zoo with Checkpoint for Quick Testing We believe that the fastest way to learn is \\"Learn by Doing,\\" so we provide several cases to help users get started q...","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/zh/guide/quickstart/2_load_ckpt.html"}],["meta",{"property":"og:url","content":"https://scu-zjz.github.io/IMDLBenCo-doc/IMDLBenCo-doc/guide/quickstart/2_load_ckpt.html"}],["meta",{"property":"og:site_name","content":"IMDLBenCo Documentation"}],["meta",{"property":"og:title","content":"Case Two: Using Model Zoo with Checkpoint for Quick Testing"}],["meta",{"property":"og:description","content":"Case Two: Using Model Zoo with Checkpoint for Quick Testing We believe that the fastest way to learn is \\"Learn by Doing,\\" so we provide several cases to help users get started q..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-05T09:14:08.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-05T09:14:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Case Two: Using Model Zoo with Checkpoint for Quick Testing\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-05T09:14:08.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Checkpoint Links","slug":"checkpoint-links","link":"#checkpoint-links","children":[]},{"level":2,"title":"Format Issues to Note","slug":"format-issues-to-note","link":"#format-issues-to-note","children":[]},{"level":2,"title":"How to Use the Downloaded Checkpoint for Inference","slug":"how-to-use-the-downloaded-checkpoint-for-inference","link":"#how-to-use-the-downloaded-checkpoint-for-inference","children":[]}],"git":{"updatedTime":1746436448000,"contributors":[{"name":"Ma Xiaochen (马晓晨)","username":"","email":"mxch1122@126.com","commits":2},{"name":"Sunnyhaze","username":"Sunnyhaze","email":"mxch1122@126.com","commits":2,"url":"https://github.com/Sunnyhaze"}],"changelog":[{"hash":"c7f3d7610a204bb4c2908a60d5d12ef757e03c4a","time":1746436448000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[debug] revise typo for previous commit"},{"hash":"5ac531197a7293bf596fae282876e2d9b22a0c4c","time":1746436265000,"email":"mxch1122@126.com","author":"Sunnyhaze","message":"[update] add google drive link"},{"hash":"3adb8aa2f1fd3408eb9837aa011bf7048ae6230b","time":1743675138000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"[update] add comment plugin to all pages."},{"hash":"2e30180fb8a110e32a3aa5fe308d2e0a030c47ec","time":1743364035000,"email":"mxch1122@126.com","author":"Ma Xiaochen (马晓晨)","message":"Revise sturcture, add more infor about data &amp; models."}]},"filePathRelative":"guide/quickstart/2_load_ckpt.md","autoDesc":true}');export{k as comp,f as data};
